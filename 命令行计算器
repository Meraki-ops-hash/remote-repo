class Calculator:
    @staticmethod
    def add(a: float, b: float) -> float:
        return a + b

    @staticmethod
    def subtract(a: float, b: float) -> float:
        return a - b

    @staticmethod
    def multiply(a: float, b: float) -> float:
        return a * b

    @staticmethod
    def divide(a: float, b: float) -> float:
        if b == 0:
            raise ValueError("Cannot divide by zero")
        return a / b

    @staticmethod
    def validate_operator(op: str) -> None:
        valid_ops = {'+', '-', '*', '/'}
        if op not in valid_ops:
            raise ValueError(f"Invalid operator: {op}. Valid operators are {valid_ops}")
import sys
from calculator import Calculator

def parse_args(args: list) -> tuple:
    if len(args) != 3:
        raise ValueError("Usage: python main.py <num1> <operator> <num2>")
    
    try:
        a = float(args[0])
        b = float(args[2])
    except ValueError:
        raise ValueError("Invalid numeric input")
    
    op = args[1]
    Calculator.validate_operator(op)
    return a, op, b

def main():
    try:
        a, op, b = parse_args(sys.argv[1:4])
        result = None
        
        if op == '+':
            result = Calculator.add(a, b)
        elif op == '-':
            result = Calculator.subtract(a, b)
        elif op == '*':
            result = Calculator.multiply(a, b)
        elif op == '/':
            result = Calculator.divide(a, b)
            
        print(f"Result: {result}")
    
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
import pytest
from calculator import Calculator

def test_add():
    assert Calculator.add(2, 3) == 5

def test_subtract():
    assert Calculator.subtract(5, 3) == 2

def test_multiply():
    assert Calculator.multiply(2, 3) == 6

def test_divide():
    assert Calculator.divide(6, 3) == 2

def test_divide_by_zero():
    with pytest.raises(ValueError):
        Calculator.divide(5, 0)

def test_invalid_operator():
    with pytest.raises(ValueError):
        Calculator.validate_operator('^')
#建议后改进代码：
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path

def init_logger(
    log_file: str = "calculator.log",
    log_level: int = logging.INFO,
    max_size: int = 1024 * 1024,  # 默认1MB
    backup_count: int = 3
) -> None:
    """
    初始化应用日志系统
    
    Args:
        log_file: 日志文件名（默认：calculator.log）
        log_level: 日志级别（默认：INFO）
        max_size: 单个日志文件最大字节数（默认：1MB）
        backup_count: 保留的备份文件数（默认：3）
    """
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    logger = logging.getLogger("calculator")
    logger.setLevel(log_level)

    # 文件处理器（带轮转功能）
    file_handler = RotatingFileHandler(
        logs_dir / log_file,
        maxBytes=max_size,
        backupCount=backup_count,
        encoding="utf-8"
    )
    file_formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    file_handler.setFormatter(file_formatter)

    # 控制台处理器
    console_handler = logging.StreamHandler()
    console_formatter = logging.Formatter(
        "%(levelname)s - %(message)s"
    )
    console_handler.setFormatter(console_formatter)

    # 避免重复添加处理器
    if not logger.handlers:
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)

    # 关闭第三方库的日志
    logging.getLogger("urllib3").setLevel(logging.WARNING)
